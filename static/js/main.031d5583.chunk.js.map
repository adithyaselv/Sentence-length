{"version":3,"sources":["RequestForm.js","App.js","serviceWorker.js","index.js"],"names":["RequestForm","state","bookUrl","loading","progressActive","currentProgress","result","resultText","fetchTime","urlOnChange","event","setState","target","value","handleFormSubmit","params","start","Date","now","axios","get","then","res","millis","data","catch","err","alert","Form","Group","Label","Control","id","placeholder","onChange","this","Text","className","Button","variant","onClick","Jumbotron","fluid","Container","Spinner","animation","role","Image","src","hist_image","JSON","stringify","hist_data","Component","App","style","border","borderRadius","margin","width","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"iTA0HeA,E,4MA/GXC,MAAQ,CACJC,QAAS,8CACTC,SAAS,EACTC,gBAAgB,EAChBC,gBAAiB,EACjBC,QAAQ,EACRC,WAAY,KACZC,UAAW,G,EAGfC,YAAc,SAACC,GACX,EAAKC,SAAS,CACVT,QAASQ,EAAME,OAAOC,MACtBV,SAAS,EACTG,QAAQ,EACRC,WAAY,Q,EAIpBO,iBAAmB,WAEf,EAAKH,SAAS,CACVL,QAAO,EACPH,SAAQ,IAGZ,IAAMY,EAAS,CAACb,QAAS,EAAKD,MAAMC,SAC9Bc,EAAQC,KAAKC,MACnBC,IAAMC,IAAI,6EAA8E,CAACL,WACpFM,MAAK,SAAAC,GACF,IAAMC,EAASN,KAAKC,MAAQF,EAC5B,EAAKL,SAAS,CACVR,SAAS,EACTG,QAAQ,EACRC,WAAYe,EAAIE,KAChBhB,UAAWe,EAAO,SAGzBE,OAAM,SAAAC,GACH,EAAKf,SAAS,CACVR,SAAQ,IAEZwB,MAAM,oB,uDAIR,IAAD,OA0CL,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,iBACA,kBAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,UAAUC,YAAY,8CAA8CC,SAAUC,KAAK1B,cACpG,kBAACmB,EAAA,EAAKQ,KAAN,CAAWC,UAAU,cAArB,oEAIJ,kBAACT,EAAA,EAAKC,MAAN,KACI,kBAACS,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASL,KAAKrB,kBAAxC,oBAEJ,kBAACc,EAAA,EAAKC,MAAN,KA7BA,EAAK5B,MAAME,QAEP,kBAACsC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,gDACA,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UACjC,0BAAMT,UAAU,WAAhB,iBAOL,MAmBP,kBAACT,EAAA,EAAKC,MAAN,KAtDA,EAAK5B,MAAMK,OAEP,kBAACmC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,kDACA,kDAAwB,EAAK1C,MAAMO,UAAnC,YACA,iDACA,kBAACuC,EAAA,EAAD,CAAOC,IAAK,EAAK/C,MAAMM,WAAW0C,WAAYP,OAAK,IACnD,sEACA,2BACKQ,KAAKC,UAAU,EAAKlD,MAAMM,WAAW6C,UAAW,KAAM,MAOhE,W,GApEGC,a,MCkBXC,MAtBf,WASE,OACE,kBAACX,EAAA,EAAD,CAAWY,MARa,CACxBC,OAAQ,oBACRC,aAAc,OACdC,OAAQ,YACRC,MAAO,OAIgCjB,OAAK,GAC1C,yBAAKL,UAAU,eACb,gDACA,qEAEF,yBAAKkB,MAAO,CAACK,QAAS,SACtB,kBAAC,EAAD,SCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.031d5583.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport Image from 'react-bootstrap/Image';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner'\n\nclass RequestForm extends Component {\n\n    state = {\n        bookUrl: 'https://www.gutenberg.org/files/46/46-0.txt',\n        loading: false,\n        progressActive: false,\n        currentProgress: 0,\n        result: false,\n        resultText: null,\n        fetchTime: 0,\n    }\n\n    urlOnChange = (event) => {\n        this.setState({\n            bookUrl: event.target.value,\n            loading: false,\n            result: false,\n            resultText: null,\n        })\n    }\n\n    handleFormSubmit = () => {\n\n        this.setState({\n            result:false,\n            loading:true\n        })\n\n        const params = {bookUrl: this.state.bookUrl}\n        const start = Date.now();\n        axios.get(\"https://us-central1-vocal-pad-109004.cloudfunctions.net/sentence-histogram\", {params})\n            .then(res => {\n                const millis = Date.now() - start;\n                this.setState({\n                    loading: false,\n                    result: true,\n                    resultText: res.data,\n                    fetchTime: millis/1000,\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    loading:false\n                })\n                alert(\"Fetch failed\")\n            })\n    }\n\n    render() {\n\n        const handleJumbotron = () => {\n            if (this.state.result) {\n                return (\n                    <Jumbotron fluid>\n                        <Container>\n                            <h4>Histogram Result: </h4>\n                            <span>Processing time: {this.state.fetchTime} seconds</span>\n                            <h6>Histogram graph: </h6>\n                            <Image src={this.state.resultText.hist_image} fluid />\n                            <h6>Word count: Number of sentences - data</h6>\n                            <p>\n                                {JSON.stringify(this.state.resultText.hist_data, null, 2)}\n                            </p>\n                        </Container>\n                    </Jumbotron>\n                )\n            }\n            else {\n                return null;\n            }\n        };\n\n        const handleLoading = () => {\n            if (this.state.loading) {\n                return (\n                    <Jumbotron fluid>\n                        <Container>\n                            <h4>Fetching Results</h4>\n                            <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                            </Spinner>\n                        </Container>\n                    </Jumbotron>\n                )\n            }\n            else {\n                return null;\n            }\n        }\n\n        return (\n            <Form >\n                <Form.Group >\n                    <Form.Label>Book URL</Form.Label>\n                    <Form.Control id=\"bookUrl\" placeholder=\"https://www.gutenberg.org/files/46/46-0.txt\" onChange={this.urlOnChange} />\n                    <Form.Text className=\"text-muted\">\n                        Enter URL containing text version of the book to find histogram \n                    </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" onClick={this.handleFormSubmit}> Fetch Results </Button>\n                </Form.Group>\n                <Form.Group>\n                    {handleLoading()}\n                </Form.Group>\n                <Form.Group>\n                    {handleJumbotron()}\n                </Form.Group>\n            </Form>\n        );\n    }\n}\n\nexport default RequestForm;","import React from 'react';\nimport RequestForm from './RequestForm';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n\n  let mainContainterStyle = {\n    border: \"1px solid #cecece\", \n    borderRadius: \"10px\", \n    margin: \"10px auto\",\n    width: \"95%\"\n  }\n\n  return (\n    <Container style={mainContainterStyle} fluid>\n      <div className=\"text-center\">\n        <h1 >Sentence lengths</h1>\n        <h6 >Get histogram of words per sentences</h6>\n      </div>\n      <div style={{padding: \"15px\"}}>\n      <RequestForm />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}